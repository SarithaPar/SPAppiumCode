"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasContent = hasContent;
exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.unwrapElement = unwrapElement;
exports.filterObject = filterObject;
exports.toReadableSizeString = toReadableSizeString;
exports.isSubPath = isSubPath;
exports.W3C_WEB_ELEMENT_IDENTIFIER = void 0;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

const W3C_WEB_ELEMENT_IDENTIFIER = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_WEB_ELEMENT_IDENTIFIER = W3C_WEB_ELEMENT_IDENTIFIER;

function hasContent(val) {
  return _lodash.default.isString(val) && val !== "";
}

function hasValue(val) {
  let hasVal = false;

  if (_lodash.default.isNumber(val)) {
    hasVal = !_lodash.default.isNaN(val);
  } else {
    hasVal = !_lodash.default.isUndefined(val) && !_lodash.default.isNull(val);
  }

  return hasVal;
}

function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== "string") {
    return str;
  }

  if (typeof quoteEscape === "undefined") {
    quoteEscape = false;
  }

  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");

  if (quoteEscape) {
    let re = new RegExp(quoteEscape, "g");
    str = str.replace(re, `\\${quoteEscape}`);
  }

  return str;
}

function localIp() {
  let ip = _lodash.default.chain(_os.default.networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();

  return ip;
}

function cancellableDelay(ms) {
  let timer;
  let resolve;
  let reject;
  const delay = new _bluebird.default.Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
    timer = setTimeout(function () {
      resolve();
    }, ms);
  });

  delay.cancel = function () {
    clearTimeout(timer);
    reject(new _bluebird.default.CancellationError());
  };

  return delay;
}

function multiResolve(roots, ...args) {
  return roots.map(root => {
    return _path.default.resolve(root, ...args);
  });
}

function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {}

  return obj;
}

function unwrapElement(el) {
  var _arr = [W3C_WEB_ELEMENT_IDENTIFIER, 'ELEMENT'];

  for (var _i = 0; _i < _arr.length; _i++) {
    const propName = _arr[_i];

    if (_lodash.default.has(el, propName)) {
      return el[propName];
    }
  }

  return el;
}

function filterObject(obj, predicate) {
  let newObj = _lodash.default.clone(obj);

  if (_lodash.default.isUndefined(predicate)) {
    predicate = v => !_lodash.default.isUndefined(v);
  } else if (!_lodash.default.isFunction(predicate)) {
    const valuePredicate = predicate;

    predicate = v => v === valuePredicate;
  }

  var _arr2 = Object.keys(obj);

  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    const key = _arr2[_i2];

    if (!predicate(obj[key], obj)) {
      delete newObj[key];
    }
  }

  return newObj;
}

function toReadableSizeString(bytes) {
  const intBytes = parseInt(bytes, 10);

  if (isNaN(intBytes) || intBytes < 0) {
    throw new Error(`Cannot convert '${bytes}' to a readable size format`);
  }

  if (intBytes >= 1024 * 1024 * 1024) {
    return `${parseFloat(intBytes / (1024 * 1024 * 1024.0)).toFixed(2)} GB`;
  } else if (intBytes >= 1024 * 1024) {
    return `${parseFloat(intBytes / (1024 * 1024.0)).toFixed(2)} MB`;
  } else if (intBytes >= 1024) {
    return `${parseFloat(intBytes / 1024.0).toFixed(2)} KB`;
  }

  return `${intBytes} B`;
}

function isSubPath(originalPath, root, forcePosix = null) {
  const pathObj = forcePosix ? _path.default.posix : _path.default;
  var _arr3 = [originalPath, root];

  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
    const p = _arr3[_i3];

    if (!pathObj.isAbsolute(p)) {
      throw new Error(`'${p}' is expected to be an absolute path`);
    }
  }

  const normalizedRoot = pathObj.normalize(root);
  const normalizedPath = pathObj.normalize(originalPath);
  return normalizedPath.startsWith(normalizedRoot);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
